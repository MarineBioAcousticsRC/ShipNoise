clear variables


mnum2secs = 24*60*60;
secs2mnum = 1/mnum2secs;
date_fmt = 'mm/dd/yyyy HH:MM:SS';


global PARAMS

% directory with mat files generated by getShipsAIS_CINMS_B_180820
idir =  'M:\MarineCadastre\matFilesMarCad';
matFiles = ls(fullfile(idir,'*2000*.mat'));
tfDir = 'E:\MBARC_TF'; % folder containing transfer functions
tfList = importdata('F:\ShippingCINMS_data\CINMS_TFs.csv');


% output for passes defined by first/last point within radius
% odir = 'E:\shipPassesSiteB\irad6500m';

% output for passes defined by trackline distance from CPA
odir0 = 'M:\MarineCadastre\Monthly4500mTrackAboutCPA_KF';
if ~exist(odir0)
    mkdir(odir0)
end


% let's call radius of interest 6.5 km, gives a passing transit of ~5.5 km (
% 6 nm ) if ship in northbound lane
% to limit to northbound lane CPA <= 5 km


mincpa_m = 5000; % [m]

% for testing
% matFiles = 'D:\Projects\ShippingCINMS\code\matlab\siteB_AIS_10km_170331_test';
% odir = 'D:\Projects\ShippingCINMS\testPasses\180823';
% matFiles = 'siteB_AIS_10km_160920';
% matFiles = 'siteB_AIS_10km_160921';
% matFiles = 'siteB_AIS_10km_170427';

dt = [];
noData = {}; % 'matfile, idx as string
mo = 0;
for mf = 1:size(matFiles,1)
    clear shipTracks
    %     load(matFiles(mf,:));
    iffn = fullfile(idir,matFiles(mf,:));
    fprintf('%s\t\t--------------\n',iffn);
    load(iffn);
    % assumes one pass per ship...should make smarter
    
    dnum = floor(shipTracks(1).dnums(1));
    [ siteB, dataID, PA ] = getSiteBLoc(dnum);
    if isempty(dataID)
        fprintf('Period not in list of included deployments\n');
        continue;
    end
    
    %%% check for new month
    mo0 = mo;
    dvec = datevec(dnum);
    yr = dvec(1);
    mo = dvec(2);
    yrmo = sprintf('%d-%02d',yr,mo);
    if mo ~= mo0
        odir = fullfile(odir0,yrmo);
        %%% check for output directory
        if ~exist(odir,'dir')
            mkdir(odir);
        end
        podir = odir;
    end
    1;
    %%% check for output directory
    
    
    %%% Make sure plots directory exists
    %     podir = fullfile(odir,'plots');
    %     if ~exist(podir,'dir')
    %         mkdir(podir);
    %     end
    for s = 1:length(shipTracks)
        [ dx, dy ] = arrayfun(@(x,y) latlon2xy(x,y,siteB(1),siteB(2)), ...
            shipTracks(s).lats,shipTracks(s).lons);
        %         d = arrayfun(@(x,y) sqrt(x^2+y^2), dx, dy);
        d = sqrt(dx.^2+dy.^2);
        [ cpa_m, cpai ] = min(d);
        % does ship get close enough to instrument?
        if cpa_m > mincpa_m
            continue
        end
        irad_m = 6500; % [m]
        tcpa = shipTracks(s).dnums(cpai);
        if 0 % limit by radius of interest
            % get start and end times by looking at first and last points
            % within range
            i0 = find(d <= irad_m,1,'first');
            in = find(d <= irad_m,1,'last');
            t0 = shipTracks(s).dnums(i0);
            tn = shipTracks(s).dnums(in);
        else % limit by distance in trackline from CPA ( i.e. ship track length on either side
            irad1_m = 4500; % [m]
            cpaPos = [ shipTracks(s).lats(cpai), shipTracks(s).lons(cpai) ];
            % get distance from CPA of each trackline point
            [ dx1, dy1 ] = arrayfun(@(x,y) latlon2xy(x,y,cpaPos(1), cpaPos(2)),...
                shipTracks(s).lats,shipTracks(s).lons);
            %             d1 = arrayfun(@(x,y) sqrt(x.^2+y^2), dx1,dy1);
            % find ship track positions within distance of CPA and radius of
            % interest around HARP
            d1 = sqrt(dx1.^2+dy1.^2);
            ii=find(d1 <= irad1_m & d <= irad_m);
            tb = max(abs(tcpa-shipTracks(s).dnums(ii)));
            
            if mf==72 && s==4
                1;
            end
            
            maxDelt = 3600; % seconds NO LOITERING!
            minDelt = 300; % seconds DONT WASTE MY TIME
            if tb*mnum2secs > maxDelt
                tb = maxDelt*secs2mnum;
            elseif tb*mnum2secs < minDelt
                continue;
            end
            t0 = tcpa-tb;
            tn = tcpa+tb;
            
        end
        
        ofroot = sprintf('%d_%s-%s',shipTracks(s).MMSI,...
            datestr(t0,'yymmdd_HHMMSS'), datestr(tn,'HHMMSS'));
        
        
        % round times to even seconds
        t0dv = datevec(t0);
        t0 = datenum([ t0dv(1:5) floor(t0dv(6)) ]);
        tndv = datevec(tn);
        tn = datenum([ tndv(1:5) floor(tndv(6)) ]);
        shipTracks(s).azimuth = azimuth(siteB(1),siteB(2),shipTracks(s).lats,shipTracks(s).lons);
        % write ship pass info to text file
        writeShipPassTxt_CINMS_B_180905(ofroot, odir, siteB, dataID, PA, ...
            shipTracks(s), t0, tn,d);
        
        
        
        offn3 = fullfile(podir,sprintf('%s_map.png',ofroot));
        %         if exist(offn3,'file')
        %             fprintf('Output map exists...skipping\n')
        % %             continue
        %         else
        %%%%% plot AIS track
        %         h2 = figure(131);
        %         clf
        %         plotShipPass_CINMS_B_180821(h2,dx,dy,shipTracks,s,cpa_m,t0,tn,irad_m);
        %         print(h2,'-dpng','-r300',offn3);
        %         % end
        
        dt(end+1,:) = [ t0, tn ];
        
        % check that time periods aren't too large
        %         tlim = 3600; % seconds
        tfilemax = 6000; % seconds
        tfilemin = 60; % seconds
        tfilemax_dnum = datenum([ 0 0 0 0 0 tfilemax]);
        delt_s = round((tn-t0)*mnum2secs); %
        if  delt_s > tfilemax
            
            % break up into shorter time periods
            tp = [ t0:tfilemax_dnum:tn ]';
            tp = [ tp, tp+tfilemax_dnum ];
            
            % if there's enough data for another file make it
            if rem(delt_s,tfilemax) < tfilemin
                % make the last file a little longer
                tp(end,:) = [];
            end
            tp(end,2) = tn;
            %             arrayfun(@(x,y) fprintf('%s - %s\n', datestr(x,'mm/dd/yy HH:MM:SS.FFF'), datestr(y,'mm/dd/yy HH:MM:SS.FFF')), tp(:,1), tp(:,2))
            1;
        else
            tp = [ t0, tn ];
        end
        
        for p = 1:size(tp,1)
            
            %             if size(tp,1) > 1
            %                 ofroot0 = ofroot;
            %                 ofroot = sprintf('%s_pt%d',ofroot,p);
            %             end
            ofroot = sprintf('%d_%s',shipTracks(s).MMSI,...
                datestr(tp(p),'yymmdd_HHMMSS'));
            
            %             if strcmp('220593000_170427_091334',ofroot)
            %                 1;
            %             end
            
            offn1 = fullfile(odir,sprintf('%s.wav',ofroot));
            
            %             if exist(offn1,'file')
            %                 fprintf('Output data exists...skipping\n')
            % %                 if size(tp,1) > 1
            % %                     ofroot = ofroot0;
            % %                 end
            %                 continue
            %             end
            
            %%%% try to get data for ship pass
            data = getCINMS_B_df20_180821(tp(p,1),tp(p,2));
            fs = PARAMS.fs;
            
            if isempty(data)
                noDataStr = sprintf('%s,%d',matFiles(mf,:),s);
                noData{end+1} = noDataStr;
                continue
            end
            
            % make sure we have enough data
            % want at least half of what we asked for
            tpdt = (tp(p,2)-tp(p,1))*mnum2secs;
            datadt = length(data)/fs;
            if datadt < .5*tpdt
                fprintf('Not enough data available...skipping\n');
                noDataStr = sprintf('%s,%d',matFiles(mf,:),s);
                noData{end+1} = noDataStr;
                continue
            end
            
            audiowrite(offn1,int16(data),fs,'BitsPerSample',16);
            
            
            %%% plot data
            h1 = [];
            [h1,sdB,specTime,specFreq] = plotShipPassWav_CINMS_B_180822(h1,data,shipTracks,s,cpa_m,t0,tn,d,tfDir,tfList,dataID);
            if ~isempty(h1)
                offn2 = fullfile(podir,sprintf('%s.jpg',ofroot));
                print(h1,'-djpeg','-r300',offn2);
            end
            offn3 = fullfile(podir,sprintf('%s.mat',ofroot));
            thisShipTrack  = shipTracks(s);
            thisShipTrack.range = d;
            sdB = sdB(1:500,:);
            rangeInterp = interp1(thisShipTrack.dnums,d,specTime);
            
            
            tfIdx = find(~cellfun(@isempty,strfind(tfList.textdata(:,1),dataID)));
            tfNum = tfList.data(tfIdx-1);
            [tfFolder, TFName] = pick_TF_subdirs(tfNum,tfDir);
            
            standardizedRangeA = thisShipTrack.range(1):-5:thisShipTrack.range(cpai);
            standardizedRangeD = thisShipTrack.range(cpai):5:thisShipTrack.range(end);
            
            try
                timeStepsTempA = interp1((thisShipTrack.range(1:cpai)),...
                    (thisShipTrack.dnums(1:cpai)),(standardizedRangeA));
            catch 
                timeStepsTempA = [];
            end
            
            try
                timeStepsTempD = interp1((thisShipTrack.range(cpai:end)),...
                    (thisShipTrack.dnums(cpai:end)),(standardizedRangeD));
            catch
                timeStepsTempD = [];
            end
            % Arrival
            standardizedRangeA = standardizedRangeA(timeStepsTempA>=t0);
            timeStepsTempA = timeStepsTempA(timeStepsTempA>=t0);
            [uRange1A,iA,~] = unique(standardizedRangeA,'stable');
            if length(uRange1A)<=2
                warning('Not enough audio data')
                continue
            end
            uTimeStepsA = timeStepsTempA(iA);
            
            
            % Departure
            standardizedRangeD = standardizedRangeD(timeStepsTempD<=tn);
            timeStepsTempD = timeStepsTempD(timeStepsTempD<=tn);
            [uRange1D,iD,~] = unique(standardizedRangeD,'stable');
            if length(uRange1D)<=2
                warning('Not enough audio data')
                continue
            end
            uTimeStepsD = timeStepsTempD(iD);
            
            
            dataLength = 50000; % amount of data to grab in samples for each range step.
            nfft = 10000; % Bin size = fs/nfft = 10000/10
            distSpecArrive = nan(length(uRange1A),(nfft/2)+1);
            for iDist = 1:length(uRange1A)
                hdr.start.dnum = datenum([2000,0,0,0,0,0]+PARAMS.start.dvec);
                myTimeIdx = round(fs*((uTimeStepsA(iDist)-t0)*60*60*24));
                if isnan(myTimeIdx) || myTimeIdx<1
                    continue
                end
                myData = data(max(myTimeIdx-(dataLength/2),1):min(myTimeIdx+(dataLength/2)-1,length(data)));
                if length(myData)<dataLength
                    myData = [myData;zeros(dataLength-length(myData),1)];
                end
                [~,f_rng,t,psd] = spectrogram(myData,hanning(nfft),0,nfft,fs,'psd');
                if iDist==1
                    [~, uppc] = fn_tfMap(fullfile(TFName.folder,TFName.name),f_rng);
                end
                sdBArrive = mean(10*log10(psd),2);
                if ~isempty(sdBArrive)
                    distSpecArrive(iDist,:) = (sdBArrive+uppc)';
                end
            end
            
            distSpecDepart= nan(length(uRange1D),(nfft/2)+1);
            for iDist = 1:length(uRange1D)
                hdr.start.dnum = datenum([2000,0,0,0,0,0]+PARAMS.start.dvec);
                myTimeIdx = round(fs*((uTimeStepsD(iDist)-t0)*60*60*24));
                if isnan(myTimeIdx) || myTimeIdx<1
                    continue
                end
                myData = data(max(myTimeIdx-(dataLength/2),1):min(myTimeIdx+(dataLength/2)-1,length(data)));
                if length(myData)<dataLength
                    myData = [myData;zeros(dataLength-length(myData),1)];
                end
                [~,f_rng,t,psd] = spectrogram(myData,hanning(nfft),0,nfft,fs,'psd');
                if (iDist==1)
                    [~, uppc] = fn_tfMap(fullfile(TFName.folder,TFName.name),f_rng);
                    %fKeep = f;
                end
                sdBDepart = mean(10*log10(psd),2);
                if ~isempty(sdBDepart)
                    distSpecDepart(iDist,:) = (sdBDepart+uppc)';
                end
            end
            distSpec = [distSpecArrive;distSpecDepart];
            uRange1 = [uRange1A,uRange1D];
            infVals = isinf(sum(distSpec,2));
            distSpec(infVals,:)=[];
            uRange1(infVals)=[];
%             figure(133);
%             imagesc(distSpec');
%             ylim([0,300]);set(gca,'ydir','normal')
%             set(gca,'xticklabel',floor(uRange1(get(gca,'xtick'))))
%             
%             colormap(jet(256));
%             caxis([ 60 105 ]);
            
        end%
        try
            [sdBRadon,projectionAngles,xResize,yResize] = calc_radon(thisShipTrack,distSpec(:,1:300)',uRange1,f_rng(1:300));

        catch
            warning('radon fail')
            continue
        end
        saveas(gca,strrep(offn3,'.mat','radon.fig'))
        save(offn3,'sdB','specTime','specFreq','thisShipTrack','rangeInterp',...
            'distSpecArrive','distSpecDepart','f_rng','uRange1A','uRange1D',...
            'uTimeStepsA','uTimeStepsD','sdBRadon','projectionAngles',...
            'distSpec','xResize','yResize','uRange1','-v7.3');
        
        %a [sdBRadon,projectionAngles] = calc_radon_range(thisShipTrack,distSpecDepart,uRange1,cpai);
        
        % close all;
    end
end

if ~isempty(noData)
    ndofn = sprintf('noData_run%s.mat',datestr(now,'yymmdd_HHMMSS'));
    save(fullfile(odir, ndofn),'noData');
end

[ ~,si ] = sort(dt(:,1));
dt = dt(si,:);
1;



